{
  "info": {
    "name": "E-Invoicing Readiness Analyzer API v2.0",
    "description": "Complete API testing collection for the E-Invoicing Readiness Analyzer - Updated for unified deployment with APIs under /api/*",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://complyance-internship-assignment.vercel.app",
      "type": "string",
      "description": "Base URL for the unified application"
    },
    {
      "key": "uploadId",
      "value": "",
      "type": "string",
      "description": "Upload ID returned from file upload"
    },
    {
      "key": "reportId",
      "value": "",
      "type": "string",
      "description": "Report ID returned from analysis"
    }
  ],
  "item": [
    {
      "name": "üè• Health & Status",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Check API and database health status"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status and timestamp', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('services');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üì§ File Upload",
      "item": [
        {
          "name": "Upload Clean CSV File",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample_clean.json",
                  "description": "Upload the clean sample file"
                },
                {
                  "key": "country",
                  "value": "AE",
                  "type": "text",
                  "description": "Country code (UAE)"
                },
                {
                  "key": "erp",
                  "value": "SAP",
                  "type": "text",
                  "description": "ERP system type"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "upload"]
            },
            "description": "Upload a clean sample file for testing"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has uploadId', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uploadId');",
                  "    pm.collectionVariables.set('uploadId', jsonData.uploadId);",
                  "});",
                  "",
                  "pm.test('Response has metadata', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('metadata');",
                  "    pm.expect(jsonData.metadata).to.have.property('fileType');",
                  "    pm.expect(jsonData.metadata).to.have.property('originalFileName');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Upload Flawed CSV File",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample_flawed.csv",
                  "description": "Upload the flawed sample CSV file"
                },
                {
                  "key": "country",
                  "value": "AE",
                  "type": "text"
                },
                {
                  "key": "erp",
                  "value": "Oracle",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "upload"]
            },
            "description": "Upload the flawed sample CSV file for testing validation rules"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has uploadId', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uploadId');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Upload JSON Data as Text",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"text\\\": \\\"[{\\\\\\\"invoice_number\\\\\\\": \\\\\\\"INV-2025-001\\\\\\\", \\\\\\\"invoice_date\\\\\\\": \\\\\\\"2025-01-15\\\\\\\", \\\\\\\"currency_code\\\\\\\": \\\\\\\"AED\\\\\\\", \\\\\\\"seller_name\\\\\\\": \\\\\\\"Test Company LLC\\\\\\\", \\\\\\\"seller_tax_number\\\\\\\": \\\\\\\"123456789012345\\\\\\\", \\\\\\\"buyer_name\\\\\\\": \\\\\\\"Customer Corp\\\\\\\", \\\\\\\"buyer_tax_number\\\\\\\": \\\\\\\"987654321098765\\\\\\\", \\\\\\\"total_excluding_vat\\\\\\\": 1000.00, \\\\\\\"vat_amount\\\\\\\": 50.00, \\\\\\\"total_including_vat\\\\\\\": 1050.00}]\\\",\\n  \\\"country\\\": \\\"AE\\\",\\n  \\\"erp\\\": \\\"Custom\\\"\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "upload"]
            },
            "description": "Upload JSON data as text string"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has uploadId', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uploadId');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîç Data Analysis",
      "item": [
        {
          "name": "Analyze Data - High Readiness",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"uploadId\\\": \\\"{{uploadId}}\\\",\\n  \\\"questionnaire\\\": {\\n    \\\"webhooks\\\": true,\\n    \\\"sandbox_env\\\": true,\\n    \\\"retries\\\": true\\n  }\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/analyze",
              "host": ["{{baseUrl}}"],
              "path": ["api", "analyze"]
            },
            "description": "Analyze uploaded data with high readiness questionnaire responses"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has reportId', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('reportId');",
                  "    pm.collectionVariables.set('reportId', jsonData.reportId);",
                  "});",
                  "",
                  "pm.test('Response has analysis results', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('readinessScore');",
                  "    pm.expect(jsonData).to.have.property('fieldCoverage');",
                  "    pm.expect(jsonData).to.have.property('ruleFindings');",
                  "});",
                  "",
                  "pm.test('Response has AI insights', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('aiInsights');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Analyze Data - Low Readiness",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"uploadId\\\": \\\"{{uploadId}}\\\",\\n  \\\"questionnaire\\\": {\\n    \\\"webhooks\\\": false,\\n    \\\"sandbox_env\\\": false,\\n    \\\"retries\\\": false\\n  }\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/analyze",
              "host": ["{{baseUrl}}"],
              "path": ["api", "analyze"]
            },
            "description": "Analyze uploaded data with low readiness questionnaire responses"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Readiness score should be lower', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.readinessScore).to.be.below(80);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Generate AI Insights",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"reportData\\\": {\\n    \\\"readinessScore\\\": 75,\\n    \\\"fieldCoverage\\\": 80,\\n    \\\"originalFileName\\\": \\\"test_invoice.csv\\\"\\n  },\\n  \\\"ruleFindings\\\": [\\n    {\\n      \\\"ruleId\\\": \\\"R001\\\",\\n      \\\"passed\\\": true,\\n      \\\"description\\\": \\\"Invoice number format validation\\\"\\n    },\\n    {\\n      \\\"ruleId\\\": \\\"R002\\\",\\n      \\\"passed\\\": false,\\n      \\\"description\\\": \\\"Date format validation\\\",\\n      \\\"issues\\\": [\\\"Invalid date format\\\"]\\n    }\\n  ],\\n  \\\"coverage\\\": {\\n    \\\"mappedFields\\\": 8,\\n    \\\"totalRequiredFields\\\": 10\\n  }\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai-insights",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai-insights"]
            },
            "description": "Generate AI-powered insights and recommendations"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI insights', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('overallAssessment');",
                  "    pm.expect(jsonData).to.have.property('priorityIssues');",
                  "    pm.expect(jsonData).to.have.property('nextSteps');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä Reports & Data",
      "item": [
        {
          "name": "Get Report by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/share/{{reportId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "share", "{{reportId}}"]
            },
            "description": "Retrieve a specific report by its ID using the share endpoint"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is valid report', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('reportId');",
                  "    pm.expect(jsonData).to.have.property('readinessScore');",
                  "    pm.expect(jsonData).to.have.property('fieldCoverage');",
                  "    pm.expect(jsonData).to.have.property('ruleFindings');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Download PDF Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/share/{{reportId}}/pdf",
              "host": ["{{baseUrl}}"],
              "path": ["api", "share", "{{reportId}}", "pdf"]
            },
            "description": "Download PDF version of the report (uses PDFKit for serverless compatibility)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});",
                  "",
                  "pm.test('Has PDF filename', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('.pdf');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Recent Reports",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/reports?limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reports"],
              "query": [
                {
                  "key": "limit",
                  "value": "5",
                  "description": "Limit number of reports returned"
                }
              ]
            },
            "description": "Get list of recent reports with optional limit"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has reports array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('reports');",
                  "    pm.expect(jsonData.reports).to.be.an('array');",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚ö†Ô∏è Error Testing",
      "item": [
        {
          "name": "Error - Invalid Upload ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"uploadId\\\": \\\"invalid_upload_id_test\\\",\\n  \\\"questionnaire\\\": {\\n    \\\"webhooks\\\": true,\\n    \\\"sandbox_env\\\": true,\\n    \\\"retries\\\": false\\n  }\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/analyze",
              "host": ["{{baseUrl}}"],
              "path": ["api", "analyze"]
            },
            "description": "Test error handling with invalid upload ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates error', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error - Non-existent Report ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/share/nonexistent_report_id_12345",
              "host": ["{{baseUrl}}"],
              "path": ["api", "share", "nonexistent_report_id_12345"]
            },
            "description": "Test error handling with non-existent report ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Error - Invalid File Upload",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "No file selected"
                },
                {
                  "key": "country",
                  "value": "AE",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "upload"]
            },
            "description": "Test error handling with missing file"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates error', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Log the request details",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global tests that run for all requests",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000);",
          "});",
          "",
          "pm.test('Response has valid JSON when expected', function () {",
          "    const contentType = pm.response.headers.get('Content-Type');",
          "    if (contentType && contentType.includes('application/json')) {",
          "        pm.response.to.be.json;",
          "    }",
          "});"
        ]
      }
    }
  ]
}